package warsgame

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Player) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "x":
			z.X, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "vx":
			z.Vx, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Vx")
				return
			}
		case "vy":
			z.Vy, err = dc.ReadFloat64()
			if err != nil {
				err = msgp.WrapError(err, "Vy")
				return
			}
		case "dir":
			z.Direction, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "Direction")
				return
			}
		case "clr":
			err = z.Color.DecodeMsg(dc)
			if err != nil {
				err = msgp.WrapError(err, "Color")
				return
			}
		case "joinedAt":
			z.JoinedAt, err = dc.ReadInt64()
			if err != nil {
				err = msgp.WrapError(err, "JoinedAt")
				return
			}
		case "chaseCount":
			z.ChaseCount, err = dc.ReadInt()
			if err != nil {
				err = msgp.WrapError(err, "ChaseCount")
				return
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Player) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 10
	// write "id"
	err = en.Append(0x8a, 0xa2, 0x69, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.ID)
	if err != nil {
		err = msgp.WrapError(err, "ID")
		return
	}
	// write "name"
	err = en.Append(0xa4, 0x6e, 0x61, 0x6d, 0x65)
	if err != nil {
		return
	}
	err = en.WriteString(z.Name)
	if err != nil {
		err = msgp.WrapError(err, "Name")
		return
	}
	// write "x"
	err = en.Append(0xa1, 0x78)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.X)
	if err != nil {
		err = msgp.WrapError(err, "X")
		return
	}
	// write "y"
	err = en.Append(0xa1, 0x79)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Y)
	if err != nil {
		err = msgp.WrapError(err, "Y")
		return
	}
	// write "vx"
	err = en.Append(0xa2, 0x76, 0x78)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Vx)
	if err != nil {
		err = msgp.WrapError(err, "Vx")
		return
	}
	// write "vy"
	err = en.Append(0xa2, 0x76, 0x79)
	if err != nil {
		return
	}
	err = en.WriteFloat64(z.Vy)
	if err != nil {
		err = msgp.WrapError(err, "Vy")
		return
	}
	// write "dir"
	err = en.Append(0xa3, 0x64, 0x69, 0x72)
	if err != nil {
		return
	}
	err = en.WriteString(z.Direction)
	if err != nil {
		err = msgp.WrapError(err, "Direction")
		return
	}
	// write "clr"
	err = en.Append(0xa3, 0x63, 0x6c, 0x72)
	if err != nil {
		return
	}
	err = z.Color.EncodeMsg(en)
	if err != nil {
		err = msgp.WrapError(err, "Color")
		return
	}
	// write "joinedAt"
	err = en.Append(0xa8, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt64(z.JoinedAt)
	if err != nil {
		err = msgp.WrapError(err, "JoinedAt")
		return
	}
	// write "chaseCount"
	err = en.Append(0xaa, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	if err != nil {
		return
	}
	err = en.WriteInt(z.ChaseCount)
	if err != nil {
		err = msgp.WrapError(err, "ChaseCount")
		return
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Player) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 10
	// string "id"
	o = append(o, 0x8a, 0xa2, 0x69, 0x64)
	o = msgp.AppendString(o, z.ID)
	// string "name"
	o = append(o, 0xa4, 0x6e, 0x61, 0x6d, 0x65)
	o = msgp.AppendString(o, z.Name)
	// string "x"
	o = append(o, 0xa1, 0x78)
	o = msgp.AppendFloat64(o, z.X)
	// string "y"
	o = append(o, 0xa1, 0x79)
	o = msgp.AppendFloat64(o, z.Y)
	// string "vx"
	o = append(o, 0xa2, 0x76, 0x78)
	o = msgp.AppendFloat64(o, z.Vx)
	// string "vy"
	o = append(o, 0xa2, 0x76, 0x79)
	o = msgp.AppendFloat64(o, z.Vy)
	// string "dir"
	o = append(o, 0xa3, 0x64, 0x69, 0x72)
	o = msgp.AppendString(o, z.Direction)
	// string "clr"
	o = append(o, 0xa3, 0x63, 0x6c, 0x72)
	o, err = z.Color.MarshalMsg(o)
	if err != nil {
		err = msgp.WrapError(err, "Color")
		return
	}
	// string "joinedAt"
	o = append(o, 0xa8, 0x6a, 0x6f, 0x69, 0x6e, 0x65, 0x64, 0x41, 0x74)
	o = msgp.AppendInt64(o, z.JoinedAt)
	// string "chaseCount"
	o = append(o, 0xaa, 0x63, 0x68, 0x61, 0x73, 0x65, 0x43, 0x6f, 0x75, 0x6e, 0x74)
	o = msgp.AppendInt(o, z.ChaseCount)
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Player) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "id":
			z.ID, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ID")
				return
			}
		case "name":
			z.Name, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Name")
				return
			}
		case "x":
			z.X, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "X")
				return
			}
		case "y":
			z.Y, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Y")
				return
			}
		case "vx":
			z.Vx, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Vx")
				return
			}
		case "vy":
			z.Vy, bts, err = msgp.ReadFloat64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Vy")
				return
			}
		case "dir":
			z.Direction, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Direction")
				return
			}
		case "clr":
			bts, err = z.Color.UnmarshalMsg(bts)
			if err != nil {
				err = msgp.WrapError(err, "Color")
				return
			}
		case "joinedAt":
			z.JoinedAt, bts, err = msgp.ReadInt64Bytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "JoinedAt")
				return
			}
		case "chaseCount":
			z.ChaseCount, bts, err = msgp.ReadIntBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "ChaseCount")
				return
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Player) Msgsize() (s int) {
	s = 1 + 3 + msgp.StringPrefixSize + len(z.ID) + 5 + msgp.StringPrefixSize + len(z.Name) + 2 + msgp.Float64Size + 2 + msgp.Float64Size + 3 + msgp.Float64Size + 3 + msgp.Float64Size + 4 + msgp.StringPrefixSize + len(z.Direction) + 4 + z.Color.Msgsize() + 9 + msgp.Int64Size + 11 + msgp.IntSize
	return
}
