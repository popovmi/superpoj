package warsgame

// Code generated by github.com/tinylib/msgp DO NOT EDIT.

import (
	"github.com/tinylib/msgp/msgp"
)

// DecodeMsg implements msgp.Decodable
func (z *Game) DecodeMsg(dc *msgp.Reader) (err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, err = dc.ReadMapHeader()
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, err = dc.ReadMapKeyPtr()
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "players":
			var zb0002 uint32
			zb0002, err = dc.ReadMapHeader()
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if z.Players == nil {
				z.Players = make(map[string]*Player, zb0002)
			} else if len(z.Players) > 0 {
				for key := range z.Players {
					delete(z.Players, key)
				}
			}
			for zb0002 > 0 {
				zb0002--
				var za0001 string
				var za0002 *Player
				za0001, err = dc.ReadString()
				if err != nil {
					err = msgp.WrapError(err, "Players")
					return
				}
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Player)
					}
					err = za0002.DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
				z.Players[za0001] = za0002
			}
		case "cId":
			z.CId, err = dc.ReadString()
			if err != nil {
				err = msgp.WrapError(err, "CId")
				return
			}
		case "portalLinks":
			var zb0003 uint32
			zb0003, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "PortalLinks")
				return
			}
			if cap(z.PortalLinks) >= int(zb0003) {
				z.PortalLinks = (z.PortalLinks)[:zb0003]
			} else {
				z.PortalLinks = make([]*PortalLink, zb0003)
			}
			for za0003 := range z.PortalLinks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "PortalLinks", za0003)
						return
					}
					z.PortalLinks[za0003] = nil
				} else {
					if z.PortalLinks[za0003] == nil {
						z.PortalLinks[za0003] = new(PortalLink)
					}
					err = z.PortalLinks[za0003].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "PortalLinks", za0003)
						return
					}
				}
			}
		case "bricks":
			var zb0004 uint32
			zb0004, err = dc.ReadArrayHeader()
			if err != nil {
				err = msgp.WrapError(err, "Bricks")
				return
			}
			if cap(z.Bricks) >= int(zb0004) {
				z.Bricks = (z.Bricks)[:zb0004]
			} else {
				z.Bricks = make([]*Brick, zb0004)
			}
			for za0004 := range z.Bricks {
				if dc.IsNil() {
					err = dc.ReadNil()
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0004)
						return
					}
					z.Bricks[za0004] = nil
				} else {
					if z.Bricks[za0004] == nil {
						z.Bricks[za0004] = new(Brick)
					}
					err = z.Bricks[za0004].DecodeMsg(dc)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0004)
						return
					}
				}
			}
		default:
			err = dc.Skip()
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	return
}

// EncodeMsg implements msgp.Encodable
func (z *Game) EncodeMsg(en *msgp.Writer) (err error) {
	// map header, size 4
	// write "players"
	err = en.Append(0x84, 0xa7, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73)
	if err != nil {
		return
	}
	err = en.WriteMapHeader(uint32(len(z.Players)))
	if err != nil {
		err = msgp.WrapError(err, "Players")
		return
	}
	for za0001, za0002 := range z.Players {
		err = en.WriteString(za0001)
		if err != nil {
			err = msgp.WrapError(err, "Players")
			return
		}
		if za0002 == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = za0002.EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	// write "cId"
	err = en.Append(0xa3, 0x63, 0x49, 0x64)
	if err != nil {
		return
	}
	err = en.WriteString(z.CId)
	if err != nil {
		err = msgp.WrapError(err, "CId")
		return
	}
	// write "portalLinks"
	err = en.Append(0xab, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.PortalLinks)))
	if err != nil {
		err = msgp.WrapError(err, "PortalLinks")
		return
	}
	for za0003 := range z.PortalLinks {
		if z.PortalLinks[za0003] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.PortalLinks[za0003].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "PortalLinks", za0003)
				return
			}
		}
	}
	// write "bricks"
	err = en.Append(0xa6, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73)
	if err != nil {
		return
	}
	err = en.WriteArrayHeader(uint32(len(z.Bricks)))
	if err != nil {
		err = msgp.WrapError(err, "Bricks")
		return
	}
	for za0004 := range z.Bricks {
		if z.Bricks[za0004] == nil {
			err = en.WriteNil()
			if err != nil {
				return
			}
		} else {
			err = z.Bricks[za0004].EncodeMsg(en)
			if err != nil {
				err = msgp.WrapError(err, "Bricks", za0004)
				return
			}
		}
	}
	return
}

// MarshalMsg implements msgp.Marshaler
func (z *Game) MarshalMsg(b []byte) (o []byte, err error) {
	o = msgp.Require(b, z.Msgsize())
	// map header, size 4
	// string "players"
	o = append(o, 0x84, 0xa7, 0x70, 0x6c, 0x61, 0x79, 0x65, 0x72, 0x73)
	o = msgp.AppendMapHeader(o, uint32(len(z.Players)))
	for za0001, za0002 := range z.Players {
		o = msgp.AppendString(o, za0001)
		if za0002 == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = za0002.MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Players", za0001)
				return
			}
		}
	}
	// string "cId"
	o = append(o, 0xa3, 0x63, 0x49, 0x64)
	o = msgp.AppendString(o, z.CId)
	// string "portalLinks"
	o = append(o, 0xab, 0x70, 0x6f, 0x72, 0x74, 0x61, 0x6c, 0x4c, 0x69, 0x6e, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.PortalLinks)))
	for za0003 := range z.PortalLinks {
		if z.PortalLinks[za0003] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.PortalLinks[za0003].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "PortalLinks", za0003)
				return
			}
		}
	}
	// string "bricks"
	o = append(o, 0xa6, 0x62, 0x72, 0x69, 0x63, 0x6b, 0x73)
	o = msgp.AppendArrayHeader(o, uint32(len(z.Bricks)))
	for za0004 := range z.Bricks {
		if z.Bricks[za0004] == nil {
			o = msgp.AppendNil(o)
		} else {
			o, err = z.Bricks[za0004].MarshalMsg(o)
			if err != nil {
				err = msgp.WrapError(err, "Bricks", za0004)
				return
			}
		}
	}
	return
}

// UnmarshalMsg implements msgp.Unmarshaler
func (z *Game) UnmarshalMsg(bts []byte) (o []byte, err error) {
	var field []byte
	_ = field
	var zb0001 uint32
	zb0001, bts, err = msgp.ReadMapHeaderBytes(bts)
	if err != nil {
		err = msgp.WrapError(err)
		return
	}
	for zb0001 > 0 {
		zb0001--
		field, bts, err = msgp.ReadMapKeyZC(bts)
		if err != nil {
			err = msgp.WrapError(err)
			return
		}
		switch msgp.UnsafeString(field) {
		case "players":
			var zb0002 uint32
			zb0002, bts, err = msgp.ReadMapHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Players")
				return
			}
			if z.Players == nil {
				z.Players = make(map[string]*Player, zb0002)
			} else if len(z.Players) > 0 {
				for key := range z.Players {
					delete(z.Players, key)
				}
			}
			for zb0002 > 0 {
				var za0001 string
				var za0002 *Player
				zb0002--
				za0001, bts, err = msgp.ReadStringBytes(bts)
				if err != nil {
					err = msgp.WrapError(err, "Players")
					return
				}
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					za0002 = nil
				} else {
					if za0002 == nil {
						za0002 = new(Player)
					}
					bts, err = za0002.UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Players", za0001)
						return
					}
				}
				z.Players[za0001] = za0002
			}
		case "cId":
			z.CId, bts, err = msgp.ReadStringBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "CId")
				return
			}
		case "portalLinks":
			var zb0003 uint32
			zb0003, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "PortalLinks")
				return
			}
			if cap(z.PortalLinks) >= int(zb0003) {
				z.PortalLinks = (z.PortalLinks)[:zb0003]
			} else {
				z.PortalLinks = make([]*PortalLink, zb0003)
			}
			for za0003 := range z.PortalLinks {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.PortalLinks[za0003] = nil
				} else {
					if z.PortalLinks[za0003] == nil {
						z.PortalLinks[za0003] = new(PortalLink)
					}
					bts, err = z.PortalLinks[za0003].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "PortalLinks", za0003)
						return
					}
				}
			}
		case "bricks":
			var zb0004 uint32
			zb0004, bts, err = msgp.ReadArrayHeaderBytes(bts)
			if err != nil {
				err = msgp.WrapError(err, "Bricks")
				return
			}
			if cap(z.Bricks) >= int(zb0004) {
				z.Bricks = (z.Bricks)[:zb0004]
			} else {
				z.Bricks = make([]*Brick, zb0004)
			}
			for za0004 := range z.Bricks {
				if msgp.IsNil(bts) {
					bts, err = msgp.ReadNilBytes(bts)
					if err != nil {
						return
					}
					z.Bricks[za0004] = nil
				} else {
					if z.Bricks[za0004] == nil {
						z.Bricks[za0004] = new(Brick)
					}
					bts, err = z.Bricks[za0004].UnmarshalMsg(bts)
					if err != nil {
						err = msgp.WrapError(err, "Bricks", za0004)
						return
					}
				}
			}
		default:
			bts, err = msgp.Skip(bts)
			if err != nil {
				err = msgp.WrapError(err)
				return
			}
		}
	}
	o = bts
	return
}

// Msgsize returns an upper bound estimate of the number of bytes occupied by the serialized message
func (z *Game) Msgsize() (s int) {
	s = 1 + 8 + msgp.MapHeaderSize
	if z.Players != nil {
		for za0001, za0002 := range z.Players {
			_ = za0002
			s += msgp.StringPrefixSize + len(za0001)
			if za0002 == nil {
				s += msgp.NilSize
			} else {
				s += za0002.Msgsize()
			}
		}
	}
	s += 4 + msgp.StringPrefixSize + len(z.CId) + 12 + msgp.ArrayHeaderSize
	for za0003 := range z.PortalLinks {
		if z.PortalLinks[za0003] == nil {
			s += msgp.NilSize
		} else {
			s += z.PortalLinks[za0003].Msgsize()
		}
	}
	s += 7 + msgp.ArrayHeaderSize
	for za0004 := range z.Bricks {
		if z.Bricks[za0004] == nil {
			s += msgp.NilSize
		} else {
			s += z.Bricks[za0004].Msgsize()
		}
	}
	return
}
